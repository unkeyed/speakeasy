/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Fast ratelimiting doesn't add latency, while consistent ratelimiting is more accurate.
 *
 * @see {@link https://unkey.dev/docs/features/ratelimiting} - Learn more
 */
export enum TypeT {
    Fast = "fast",
    Consistent = "consistent",
}

/**
 * Unkey comes with per-key ratelimiting out of the box.
 */
export class Ratelimit extends SpeakeasyBase {
    /**
     * The total amount of burstable requests.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "limit" })
    limit: number;

    /**
     * Determines the speed at which tokens are refilled, in milliseconds.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "refillInterval" })
    refillInterval: number;

    /**
     * How many tokens to refill during each refillInterval.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "refillRate" })
    refillRate: number;

    /**
     * Fast ratelimiting doesn't add latency, while consistent ratelimiting is more accurate.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: TypeT;
}

/**
 * Determines the rate at which verifications will be refilled.
 */
export enum Interval {
    Daily = "daily",
    Monthly = "monthly",
}

/**
 * Unkey allows you to refill remaining verifications on a key on a regular interval.
 */
export class Refill extends SpeakeasyBase {
    /**
     * Resets `remaining` to this value every interval.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "amount" })
    amount: number;

    /**
     * Determines the rate at which verifications will be refilled.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "interval" })
    interval: Interval;

    /**
     * The unix timestamp in miliseconds when the key was last refilled.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "lastRefillAt" })
    lastRefillAt?: number;
}

export class Key extends SpeakeasyBase {
    /**
     * The id of the api that this key is for
     */
    @SpeakeasyMetadata()
    @Expose({ name: "apiId" })
    apiId?: string;

    /**
     * The unix timestamp in milliseconds when the key was created
     */
    @SpeakeasyMetadata()
    @Expose({ name: "createdAt" })
    createdAt?: number;

    /**
     * The unix timestamp in milliseconds when the key was deleted. We don't delete the key outright, you can restore it later.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "deletedAt" })
    deletedAt?: number;

    /**
     * Sets if key is enabled or disabled. Disabled keys are not valid.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "enabled" })
    enabled?: boolean;

    /**
     * The unix timestamp in milliseconds when the key will expire. If this field is null or undefined, the key is not expiring.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "expires" })
    expires?: number;

    /**
     * The id of the key
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * Any additional metadata you want to store with the key
     */
    @SpeakeasyMetadata()
    @Expose({ name: "meta" })
    meta?: Record<string, any>;

    /**
     * The name of the key, give keys a name to easily identify their purpose
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * The id of the tenant associated with this key. Use whatever reference you have in your system to identify the tenant. When verifying the key, we will send this field back to you, so you know who is accessing your API.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ownerId" })
    ownerId?: string;

    /**
     * Unkey comes with per-key ratelimiting out of the box.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ratelimit" })
    @Type(() => Ratelimit)
    ratelimit?: Ratelimit;

    /**
     * Unkey allows you to refill remaining verifications on a key on a regular interval.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "refill" })
    @Type(() => Refill)
    refill?: Refill;

    /**
     * The number of requests that can be made with this key before it becomes invalid. If this field is null or undefined, the key has no request limit.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "remaining" })
    remaining?: number;

    /**
     * All roles this key belongs to
     */
    @SpeakeasyMetadata()
    @Expose({ name: "roles" })
    roles?: string[];

    /**
     * The first few characters of the key to visually identify it
     */
    @SpeakeasyMetadata()
    @Expose({ name: "start" })
    start: string;

    /**
     * The id of the workspace that owns the key
     */
    @SpeakeasyMetadata()
    @Expose({ name: "workspaceId" })
    workspaceId: string;
}
