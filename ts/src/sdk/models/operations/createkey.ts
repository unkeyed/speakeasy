/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Fast ratelimiting doesn't add latency, while consistent ratelimiting is more accurate.
 *
 * @see {@link https://unkey.dev/docs/features/ratelimiting} - Learn more
 */
export enum TypeT {
    Fast = "fast",
    Consistent = "consistent",
}

/**
 * Unkey comes with per-key ratelimiting out of the box.
 */
export class Ratelimit extends SpeakeasyBase {
    /**
     * The total amount of burstable requests.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "limit" })
    limit: number;

    /**
     * Determines the speed at which tokens are refilled, in milliseconds.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "refillInterval" })
    refillInterval: number;

    /**
     * How many tokens to refill during each refillInterval.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "refillRate" })
    refillRate: number;

    /**
     * Fast ratelimiting doesn't add latency, while consistent ratelimiting is more accurate.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: TypeT;
}

/**
 * Unkey will automatically refill verifications at the set interval.
 */
export enum Interval {
    Daily = "daily",
    Monthly = "monthly",
}

/**
 * Unkey enables you to refill verifications for each key at regular intervals.
 */
export class Refill extends SpeakeasyBase {
    /**
     * The number of verifications to refill for each occurrence is determined individually for each key.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "amount" })
    amount: number;

    /**
     * Unkey will automatically refill verifications at the set interval.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "interval" })
    interval: Interval;
}

export class CreateKeyRequestBody extends SpeakeasyBase {
    /**
     * Choose an `API` where this key should be created.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "apiId" })
    apiId: string;

    /**
     * The byte length used to generate your key determines its entropy as well as its length. Higher is better, but keys become longer and more annoying to handle. The default is 16 bytes, or 2^^128 possible combinations.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "byteLength" })
    byteLength?: number;

    /**
     * Sets if key is enabled or disabled. Disabled keys are not valid.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "enabled" })
    enabled?: boolean;

    /**
     * You can auto expire keys by providing a unix timestamp in milliseconds. Once Keys expire they will automatically be disabled and are no longer valid unless you enable them again.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "expires" })
    expires?: number;

    /**
     * This is a place for dynamic meta data, anything that feels useful for you should go here
     */
    @SpeakeasyMetadata()
    @Expose({ name: "meta" })
    meta?: Record<string, any>;

    /**
     * The name for your Key. This is not customer facing.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * Your userâ€™s Id. This will provide a link between Unkey and your customer record.
     *
     * @remarks
     * When validating a key, we will return this back to you, so you can clearly identify your user from their api key.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ownerId" })
    ownerId?: string;

    /**
     * To make it easier for your users to understand which product an api key belongs to, you can add prefix them.
     *
     * @remarks
     *
     * For example Stripe famously prefixes their customer ids with cus_ or their api keys with sk_live_.
     *
     * The underscore is automatically added if you are defining a prefix, for example: "prefix": "abc" will result in a key like abc_xxxxxxxxx
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "prefix" })
    prefix?: string;

    /**
     * Unkey comes with per-key ratelimiting out of the box.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ratelimit" })
    @Type(() => Ratelimit)
    ratelimit?: Ratelimit;

    /**
     * Unkey enables you to refill verifications for each key at regular intervals.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "refill" })
    @Type(() => Refill)
    refill?: Refill;

    /**
     * You can limit the number of requests a key can make. Once a key reaches 0 remaining requests, it will automatically be disabled and is no longer valid unless you update it.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "remaining" })
    remaining?: number;

    /**
     * A list of roles that this key should have. New roles will be created if they don't exist yet.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "roles" })
    roles?: string[];
}

/**
 * The configuration for an api
 */
export class CreateKeyResponseBody extends SpeakeasyBase {
    /**
     * The newly created api key, do not store this on your own system but pass it along to your user.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "key" })
    key: string;

    /**
     * The id of the key. This is not a secret and can be stored as a reference if you wish. You need the keyId to update or delete a key later.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "keyId" })
    keyId: string;
}

export class CreateKeyResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
     */
    @SpeakeasyMetadata()
    errBadRequest?: shared.ErrBadRequest;

    /**
     * This response is sent when a request conflicts with the current state of the server.
     */
    @SpeakeasyMetadata()
    errConflict?: shared.ErrConflict;

    /**
     * The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
     */
    @SpeakeasyMetadata()
    errForbidden?: shared.ErrForbidden;

    /**
     * The server has encountered a situation it does not know how to handle.
     */
    @SpeakeasyMetadata()
    errInternalServerError?: shared.ErrInternalServerError;

    /**
     * The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.
     */
    @SpeakeasyMetadata()
    errNotFound?: shared.ErrNotFound;

    /**
     * The user has sent too many requests in a given amount of time ("rate limiting")
     */
    @SpeakeasyMetadata()
    errTooManyRequests?: shared.ErrTooManyRequests;

    /**
     * Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
     */
    @SpeakeasyMetadata()
    errUnauthorized?: shared.ErrUnauthorized;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * The configuration for an api
     */
    @SpeakeasyMetadata()
    object?: CreateKeyResponseBody;
}
