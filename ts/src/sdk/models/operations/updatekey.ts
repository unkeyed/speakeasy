/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Fast ratelimiting doesn't add latency, while consistent ratelimiting is more accurate.
 *
 * @see {@link https://unkey.dev/docs/features/ratelimiting} - Learn more
 */
export enum UpdateKeyType {
    Fast = "fast",
    Consistent = "consistent",
}

/**
 * Unkey comes with per-key ratelimiting out of the box. Set `null` to disable.
 */
export class UpdateKeyRatelimit extends SpeakeasyBase {
    /**
     * The total amount of burstable requests.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "limit" })
    limit: number;

    /**
     * Determines the speed at which tokens are refilled, in milliseconds.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "refillInterval" })
    refillInterval: number;

    /**
     * How many tokens to refill during each refillInterval.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "refillRate" })
    refillRate: number;

    /**
     * Fast ratelimiting doesn't add latency, while consistent ratelimiting is more accurate.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: UpdateKeyType;
}

/**
 * Unkey will automatically refill verifications at the set interval. If null is used the refill functionality will be removed from the key.
 */
export enum UpdateKeyInterval {
    Daily = "daily",
    Monthly = "monthly",
}

/**
 * Unkey enables you to refill verifications for each key at regular intervals.
 */
export class UpdateKeyRefill extends SpeakeasyBase {
    /**
     * The amount of verifications to refill for each occurrence is determined individually for each key.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "amount" })
    amount: number;

    /**
     * Unkey will automatically refill verifications at the set interval. If null is used the refill functionality will be removed from the key.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "interval" })
    interval: UpdateKeyInterval;
}

export class UpdateKeyRequestBody extends SpeakeasyBase {
    /**
     * Set if key is enabled or disabled. If disabled, the key cannot be used to verify.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "enabled" })
    enabled?: boolean;

    /**
     * The unix timestamp in milliseconds when the key will expire. If this field is null or undefined, the key is not expiring.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "expires" })
    expires?: number;

    /**
     * The id of the key you want to modify
     */
    @SpeakeasyMetadata()
    @Expose({ name: "keyId" })
    keyId: string;

    /**
     * Any additional metadata you want to store with the key
     */
    @SpeakeasyMetadata()
    @Expose({ name: "meta" })
    meta?: Record<string, any>;

    /**
     * The name of the key
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * The id of the tenant associated with this key. Use whatever reference you have in your system to identify the tenant. When verifying the key, we will send this field back to you, so you know who is accessing your API.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ownerId" })
    ownerId?: string;

    /**
     * Unkey comes with per-key ratelimiting out of the box. Set `null` to disable.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ratelimit" })
    @Type(() => UpdateKeyRatelimit)
    ratelimit?: UpdateKeyRatelimit;

    /**
     * Unkey enables you to refill verifications for each key at regular intervals.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "refill" })
    @Type(() => UpdateKeyRefill)
    refill?: UpdateKeyRefill;

    /**
     * The number of requests that can be made with this key before it becomes invalid. Set `null` to disable.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "remaining" })
    remaining?: number;
}

/**
 * The key was successfully updated, it may take up to 30s for this to take effect in all regions
 */
export class UpdateKeyResponseBody extends SpeakeasyBase {}

export class UpdateKeyResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
     */
    @SpeakeasyMetadata()
    errBadRequest?: shared.ErrBadRequest;

    /**
     * This response is sent when a request conflicts with the current state of the server.
     */
    @SpeakeasyMetadata()
    errConflict?: shared.ErrConflict;

    /**
     * The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
     */
    @SpeakeasyMetadata()
    errForbidden?: shared.ErrForbidden;

    /**
     * The server has encountered a situation it does not know how to handle.
     */
    @SpeakeasyMetadata()
    errInternalServerError?: shared.ErrInternalServerError;

    /**
     * The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.
     */
    @SpeakeasyMetadata()
    errNotFound?: shared.ErrNotFound;

    /**
     * The user has sent too many requests in a given amount of time ("rate limiting")
     */
    @SpeakeasyMetadata()
    errTooManyRequests?: shared.ErrTooManyRequests;

    /**
     * Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
     */
    @SpeakeasyMetadata()
    errUnauthorized?: shared.ErrUnauthorized;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * The key was successfully updated, it may take up to 30s for this to take effect in all regions
     */
    @SpeakeasyMetadata()
    object?: UpdateKeyResponseBody;
}
