// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"fmt"
)

// SchemasErrInternalServerErrorCode - A machine readable error code.
type SchemasErrInternalServerErrorCode string

const (
	SchemasErrInternalServerErrorCodeInternalServerError SchemasErrInternalServerErrorCode = "INTERNAL_SERVER_ERROR"
)

func (e SchemasErrInternalServerErrorCode) ToPointer() *SchemasErrInternalServerErrorCode {
	return &e
}

func (e *SchemasErrInternalServerErrorCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INTERNAL_SERVER_ERROR":
		*e = SchemasErrInternalServerErrorCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasErrInternalServerErrorCode: %v", v)
	}
}

type SchemasErrInternalServerErrorError struct {
	// A machine readable error code.
	Code SchemasErrInternalServerErrorCode `json:"code"`
	// A link to our documentation with more details about this error code
	Docs string `json:"docs"`
	// A human readable explanation of what went wrong
	Message string `json:"message"`
	// Please always include the requestId in your error report
	RequestID string `json:"requestId"`
}

func (o *SchemasErrInternalServerErrorError) GetCode() SchemasErrInternalServerErrorCode {
	if o == nil {
		return SchemasErrInternalServerErrorCode("")
	}
	return o.Code
}

func (o *SchemasErrInternalServerErrorError) GetDocs() string {
	if o == nil {
		return ""
	}
	return o.Docs
}

func (o *SchemasErrInternalServerErrorError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *SchemasErrInternalServerErrorError) GetRequestID() string {
	if o == nil {
		return ""
	}
	return o.RequestID
}

// ErrInternalServerError - The server has encountered a situation it does not know how to handle.
type ErrInternalServerError struct {
	Error_ SchemasErrInternalServerErrorError `json:"error"`
}

var _ error = &ErrInternalServerError{}

func (e *ErrInternalServerError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
