/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A machine readable error code.
 */
export enum ErrForbiddenCode {
    Forbidden = "FORBIDDEN",
}

export type ErrForbiddenError = {
    /**
     * A machine readable error code.
     */
    code: ErrForbiddenCode;
    /**
     * A link to our documentation with more details about this error code
     */
    docs: string;
    /**
     * A human readable explanation of what went wrong
     */
    message: string;
    /**
     * Please always include the requestId in your error report
     */
    requestId: string;
};

/**
 * The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
 */
export type ErrForbiddenData = {
    error: ErrForbiddenError;
};

/**
 * The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
 */
export class ErrForbidden extends Error {
    error: ErrForbiddenError;

    /** The original data that was passed to this error instance. */
    data$: ErrForbiddenData;

    constructor(err: ErrForbiddenData) {
        super("");
        this.data$ = err;

        this.error = err.error;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ErrForbidden";
    }
}

/** @internal */
export const ErrForbiddenCode$ = z.nativeEnum(ErrForbiddenCode);

/** @internal */
export namespace ErrForbiddenError$ {
    export type Inbound = {
        code: ErrForbiddenCode;
        docs: string;
        message: string;
        requestId: string;
    };

    export const inboundSchema: z.ZodType<ErrForbiddenError, z.ZodTypeDef, Inbound> = z
        .object({
            code: ErrForbiddenCode$,
            docs: z.string(),
            message: z.string(),
            requestId: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                docs: v.docs,
                message: v.message,
                requestId: v.requestId,
            };
        });

    export type Outbound = {
        code: ErrForbiddenCode;
        docs: string;
        message: string;
        requestId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrForbiddenError> = z
        .object({
            code: ErrForbiddenCode$,
            docs: z.string(),
            message: z.string(),
            requestId: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                docs: v.docs,
                message: v.message,
                requestId: v.requestId,
            };
        });
}

/** @internal */
export namespace ErrForbidden$ {
    export type Inbound = {
        error: ErrForbiddenError$.Inbound;
    };

    export const inboundSchema: z.ZodType<ErrForbidden, z.ZodTypeDef, Inbound> = z
        .object({
            error: z.lazy(() => ErrForbiddenError$.inboundSchema),
        })
        .transform((v) => {
            return new ErrForbidden({
                error: v.error,
            });
        });
    export type Outbound = {
        error: ErrForbiddenError$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrForbidden> = z
        .instanceof(ErrForbidden)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    error: z.lazy(() => ErrForbiddenError$.outboundSchema),
                })
                .transform((v) => {
                    return {
                        error: v.error,
                    };
                })
        );
}
