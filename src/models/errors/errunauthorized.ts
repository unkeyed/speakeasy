/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * A machine readable error code.
 */
export enum ErrUnauthorizedCode {
    Unauthorized = "UNAUTHORIZED",
}

export type ErrUnauthorizedError = {
    /**
     * A machine readable error code.
     */
    code: ErrUnauthorizedCode;
    /**
     * A link to our documentation with more details about this error code
     */
    docs: string;
    /**
     * A human readable explanation of what went wrong
     */
    message: string;
    /**
     * Please always include the requestId in your error report
     */
    requestId: string;
};

/**
 * Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
 */
export type ErrUnauthorizedData = {
    error: ErrUnauthorizedError;
};

/**
 * Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
 */
export class ErrUnauthorized extends Error {
    error: ErrUnauthorizedError;

    /** The original data that was passed to this error instance. */
    data$: ErrUnauthorizedData;

    constructor(err: ErrUnauthorizedData) {
        super("");
        this.data$ = err;

        this.error = err.error;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ErrUnauthorized";
    }
}

/** @internal */
export const ErrUnauthorizedCode$ = z.nativeEnum(ErrUnauthorizedCode);

/** @internal */
export namespace ErrUnauthorizedError$ {
    export type Inbound = {
        code: ErrUnauthorizedCode;
        docs: string;
        message: string;
        requestId: string;
    };

    export const inboundSchema: z.ZodType<ErrUnauthorizedError, z.ZodTypeDef, Inbound> = z
        .object({
            code: ErrUnauthorizedCode$,
            docs: z.string(),
            message: z.string(),
            requestId: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                docs: v.docs,
                message: v.message,
                requestId: v.requestId,
            };
        });

    export type Outbound = {
        code: ErrUnauthorizedCode;
        docs: string;
        message: string;
        requestId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrUnauthorizedError> = z
        .object({
            code: ErrUnauthorizedCode$,
            docs: z.string(),
            message: z.string(),
            requestId: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                docs: v.docs,
                message: v.message,
                requestId: v.requestId,
            };
        });
}

/** @internal */
export namespace ErrUnauthorized$ {
    export type Inbound = {
        error: ErrUnauthorizedError$.Inbound;
    };

    export const inboundSchema: z.ZodType<ErrUnauthorized, z.ZodTypeDef, Inbound> = z
        .object({
            error: z.lazy(() => ErrUnauthorizedError$.inboundSchema),
        })
        .transform((v) => {
            return new ErrUnauthorized({
                error: v.error,
            });
        });
    export type Outbound = {
        error: ErrUnauthorizedError$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrUnauthorized> = z
        .instanceof(ErrUnauthorized)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    error: z.lazy(() => ErrUnauthorizedError$.outboundSchema),
                })
                .transform((v) => {
                    return {
                        error: v.error,
                    };
                })
        );
}
