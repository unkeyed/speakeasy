/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Fast ratelimiting doesn't add latency, while consistent ratelimiting is more accurate.
 *
 * @see {@link https://unkey.dev/docs/features/ratelimiting} - Learn more
 */
export enum PutV1KeysKeyIdType {
    Fast = "fast",
    Consistent = "consistent",
}

/**
 * Unkey comes with per-key ratelimiting out of the box. Set `null` to disable.
 */
export type PutV1KeysKeyIdRatelimit = {
    /**
     * Fast ratelimiting doesn't add latency, while consistent ratelimiting is more accurate.
     */
    type: PutV1KeysKeyIdType;
    /**
     * The total amount of burstable requests.
     */
    limit: number;
    /**
     * How many tokens to refill during each refillInterval.
     */
    refillRate: number;
    /**
     * Determines the speed at which tokens are refilled, in milliseconds.
     */
    refillInterval: number;
};

export type PutV1KeysKeyIdRequestBody = {
    /**
     * The name of the key
     */
    name?: string | null | undefined;
    /**
     * The id of the tenant associated with this key. Use whatever reference you have in your system to identify the tenant. When verifying the key, we will send this field back to you, so you know who is accessing your API.
     */
    ownerId?: string | null | undefined;
    /**
     * Any additional metadata you want to store with the key
     */
    meta?: Record<string, any> | null | undefined;
    /**
     * The unix timestamp in milliseconds when the key will expire. If this field is null or undefined, the key is not expiring.
     */
    expires?: number | null | undefined;
    /**
     * Unkey comes with per-key ratelimiting out of the box. Set `null` to disable.
     */
    ratelimit?: PutV1KeysKeyIdRatelimit | null | undefined;
    /**
     * The number of requests that can be made with this key before it becomes invalid. Set `null` to disable.
     */
    remaining?: number | null | undefined;
};

export type PutV1KeysKeyIdRequest = {
    keyId: string;
    requestBody: PutV1KeysKeyIdRequestBody;
};

/**
 * The key was successfully updated, it may take up to 30s for this to take effect in all regions
 */
export type PutV1KeysKeyIdResponseBody = {};

export type PutV1KeysKeyIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The key was successfully updated, it may take up to 30s for this to take effect in all regions
     */
    object?: PutV1KeysKeyIdResponseBody | undefined;
};

/** @internal */
export const PutV1KeysKeyIdType$ = z.nativeEnum(PutV1KeysKeyIdType);

/** @internal */
export namespace PutV1KeysKeyIdRatelimit$ {
    export type Inbound = {
        type: PutV1KeysKeyIdType;
        limit: number;
        refillRate: number;
        refillInterval: number;
    };

    export const inboundSchema: z.ZodType<PutV1KeysKeyIdRatelimit, z.ZodTypeDef, Inbound> = z
        .object({
            type: PutV1KeysKeyIdType$,
            limit: z.number().int(),
            refillRate: z.number().int(),
            refillInterval: z.number().int(),
        })
        .transform((v) => {
            return {
                type: v.type,
                limit: v.limit,
                refillRate: v.refillRate,
                refillInterval: v.refillInterval,
            };
        });

    export type Outbound = {
        type: PutV1KeysKeyIdType;
        limit: number;
        refillRate: number;
        refillInterval: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PutV1KeysKeyIdRatelimit> = z
        .object({
            type: PutV1KeysKeyIdType$,
            limit: z.number().int(),
            refillRate: z.number().int(),
            refillInterval: z.number().int(),
        })
        .transform((v) => {
            return {
                type: v.type,
                limit: v.limit,
                refillRate: v.refillRate,
                refillInterval: v.refillInterval,
            };
        });
}

/** @internal */
export namespace PutV1KeysKeyIdRequestBody$ {
    export type Inbound = {
        name?: string | null | undefined;
        ownerId?: string | null | undefined;
        meta?: Record<string, any> | null | undefined;
        expires?: number | null | undefined;
        ratelimit?: PutV1KeysKeyIdRatelimit$.Inbound | null | undefined;
        remaining?: number | null | undefined;
    };

    export const inboundSchema: z.ZodType<PutV1KeysKeyIdRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.nullable(z.string()).optional(),
            ownerId: z.nullable(z.string()).optional(),
            meta: z.nullable(z.record(z.any())).optional(),
            expires: z.nullable(z.number()).optional(),
            ratelimit: z.nullable(z.lazy(() => PutV1KeysKeyIdRatelimit$.inboundSchema)).optional(),
            remaining: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.expires === undefined ? null : { expires: v.expires }),
                ...(v.ratelimit === undefined ? null : { ratelimit: v.ratelimit }),
                ...(v.remaining === undefined ? null : { remaining: v.remaining }),
            };
        });

    export type Outbound = {
        name?: string | null | undefined;
        ownerId?: string | null | undefined;
        meta?: Record<string, any> | null | undefined;
        expires?: number | null | undefined;
        ratelimit?: PutV1KeysKeyIdRatelimit$.Outbound | null | undefined;
        remaining?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PutV1KeysKeyIdRequestBody> = z
        .object({
            name: z.nullable(z.string()).optional(),
            ownerId: z.nullable(z.string()).optional(),
            meta: z.nullable(z.record(z.any())).optional(),
            expires: z.nullable(z.number()).optional(),
            ratelimit: z.nullable(z.lazy(() => PutV1KeysKeyIdRatelimit$.outboundSchema)).optional(),
            remaining: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.expires === undefined ? null : { expires: v.expires }),
                ...(v.ratelimit === undefined ? null : { ratelimit: v.ratelimit }),
                ...(v.remaining === undefined ? null : { remaining: v.remaining }),
            };
        });
}

/** @internal */
export namespace PutV1KeysKeyIdRequest$ {
    export type Inbound = {
        keyId: string;
        RequestBody: PutV1KeysKeyIdRequestBody$.Inbound;
    };

    export const inboundSchema: z.ZodType<PutV1KeysKeyIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            keyId: z.string(),
            RequestBody: z.lazy(() => PutV1KeysKeyIdRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return {
                keyId: v.keyId,
                requestBody: v.RequestBody,
            };
        });

    export type Outbound = {
        keyId: string;
        RequestBody: PutV1KeysKeyIdRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PutV1KeysKeyIdRequest> = z
        .object({
            keyId: z.string(),
            requestBody: z.lazy(() => PutV1KeysKeyIdRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return {
                keyId: v.keyId,
                RequestBody: v.requestBody,
            };
        });
}

/** @internal */
export namespace PutV1KeysKeyIdResponseBody$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PutV1KeysKeyIdResponseBody, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PutV1KeysKeyIdResponseBody> =
        z.object({});
}

/** @internal */
export namespace PutV1KeysKeyIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PutV1KeysKeyIdResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PutV1KeysKeyIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PutV1KeysKeyIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PutV1KeysKeyIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PutV1KeysKeyIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PutV1KeysKeyIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
