/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type PostV1ApisDeleteApiRequestBody = {
    /**
     * The id of the api to delete
     */
    apiId: string;
};

/**
 * The api was successfully deleted, it may take up to 30s for this to take effect in all regions
 */
export type PostV1ApisDeleteApiResponseBody = {};

export type PostV1ApisDeleteApiResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The api was successfully deleted, it may take up to 30s for this to take effect in all regions
     */
    object?: PostV1ApisDeleteApiResponseBody | undefined;
};

/** @internal */
export namespace PostV1ApisDeleteApiRequestBody$ {
    export type Inbound = {
        apiId: string;
    };

    export const inboundSchema: z.ZodType<PostV1ApisDeleteApiRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            apiId: z.string(),
        })
        .transform((v) => {
            return {
                apiId: v.apiId,
            };
        });

    export type Outbound = {
        apiId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostV1ApisDeleteApiRequestBody> =
        z
            .object({
                apiId: z.string(),
            })
            .transform((v) => {
                return {
                    apiId: v.apiId,
                };
            });
}

/** @internal */
export namespace PostV1ApisDeleteApiResponseBody$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostV1ApisDeleteApiResponseBody, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostV1ApisDeleteApiResponseBody
    > = z.object({});
}

/** @internal */
export namespace PostV1ApisDeleteApiResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PostV1ApisDeleteApiResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostV1ApisDeleteApiResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PostV1ApisDeleteApiResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PostV1ApisDeleteApiResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostV1ApisDeleteApiResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PostV1ApisDeleteApiResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
