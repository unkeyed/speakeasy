/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetV1ApisGetApiRequest = {
    apiId: string;
};

/**
 * The configuration for an api
 */
export type GetV1ApisGetApiResponseBody = {
    /**
     * The id of the key
     */
    id: string;
    /**
     * The id of the workspace that owns the api
     */
    workspaceId: string;
    /**
     * The name of the api. This is internal and your users will not see this.
     */
    name?: string | undefined;
};

export type GetV1ApisGetApiResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The configuration for an api
     */
    object?: GetV1ApisGetApiResponseBody | undefined;
};

/** @internal */
export namespace GetV1ApisGetApiRequest$ {
    export type Inbound = {
        apiId: string;
    };

    export const inboundSchema: z.ZodType<GetV1ApisGetApiRequest, z.ZodTypeDef, Inbound> = z
        .object({
            apiId: z.string(),
        })
        .transform((v) => {
            return {
                apiId: v.apiId,
            };
        });

    export type Outbound = {
        apiId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetV1ApisGetApiRequest> = z
        .object({
            apiId: z.string(),
        })
        .transform((v) => {
            return {
                apiId: v.apiId,
            };
        });
}

/** @internal */
export namespace GetV1ApisGetApiResponseBody$ {
    export type Inbound = {
        id: string;
        workspaceId: string;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetV1ApisGetApiResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            workspaceId: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                workspaceId: v.workspaceId,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        id: string;
        workspaceId: string;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetV1ApisGetApiResponseBody> = z
        .object({
            id: z.string(),
            workspaceId: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                workspaceId: v.workspaceId,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace GetV1ApisGetApiResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetV1ApisGetApiResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetV1ApisGetApiResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetV1ApisGetApiResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetV1ApisGetApiResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetV1ApisGetApiResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetV1ApisGetApiResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
