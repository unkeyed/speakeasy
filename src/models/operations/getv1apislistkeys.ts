/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type GetV1ApisListKeysRequest = {
    apiId: string;
    limit?: number | undefined;
    cursor?: string | undefined;
    ownerId?: string | undefined;
};

/**
 * The configuration for an api
 */
export type GetV1ApisListKeysResponseBody = {
    keys: Array<components.Key>;
    /**
     * The cursor to use for the next page of results, if no cursor is returned, there are no more results
     */
    cursor?: string | undefined;
    /**
     * The total number of keys for this api
     */
    total: number;
};

export type GetV1ApisListKeysResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The configuration for an api
     */
    object?: GetV1ApisListKeysResponseBody | undefined;
};

/** @internal */
export namespace GetV1ApisListKeysRequest$ {
    export type Inbound = {
        apiId: string;
        limit?: number | undefined;
        cursor?: string | undefined;
        ownerId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetV1ApisListKeysRequest, z.ZodTypeDef, Inbound> = z
        .object({
            apiId: z.string(),
            limit: z.number().int().default(100),
            cursor: z.string().optional(),
            ownerId: z.string().optional(),
        })
        .transform((v) => {
            return {
                apiId: v.apiId,
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
            };
        });

    export type Outbound = {
        apiId: string;
        limit: number;
        cursor?: string | undefined;
        ownerId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetV1ApisListKeysRequest> = z
        .object({
            apiId: z.string(),
            limit: z.number().int().default(100),
            cursor: z.string().optional(),
            ownerId: z.string().optional(),
        })
        .transform((v) => {
            return {
                apiId: v.apiId,
                limit: v.limit,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
            };
        });
}

/** @internal */
export namespace GetV1ApisListKeysResponseBody$ {
    export type Inbound = {
        keys: Array<components.Key$.Inbound>;
        cursor?: string | undefined;
        total: number;
    };

    export const inboundSchema: z.ZodType<GetV1ApisListKeysResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            keys: z.array(components.Key$.inboundSchema),
            cursor: z.string().optional(),
            total: z.number().int(),
        })
        .transform((v) => {
            return {
                keys: v.keys,
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                total: v.total,
            };
        });

    export type Outbound = {
        keys: Array<components.Key$.Outbound>;
        cursor?: string | undefined;
        total: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetV1ApisListKeysResponseBody> =
        z
            .object({
                keys: z.array(components.Key$.outboundSchema),
                cursor: z.string().optional(),
                total: z.number().int(),
            })
            .transform((v) => {
                return {
                    keys: v.keys,
                    ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                    total: v.total,
                };
            });
}

/** @internal */
export namespace GetV1ApisListKeysResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetV1ApisListKeysResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetV1ApisListKeysResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetV1ApisListKeysResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetV1ApisListKeysResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetV1ApisListKeysResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetV1ApisListKeysResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
