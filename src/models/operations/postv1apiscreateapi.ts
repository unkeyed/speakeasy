/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type PostV1ApisCreateApiRequestBody = {
    /**
     * The name for your API. This is not customer facing.
     */
    name: string;
};

/**
 * The configuration for an api
 */
export type PostV1ApisCreateApiResponseBody = {
    /**
     * The id of the api
     */
    apiId: string;
};

export type PostV1ApisCreateApiResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The configuration for an api
     */
    object?: PostV1ApisCreateApiResponseBody | undefined;
};

/** @internal */
export namespace PostV1ApisCreateApiRequestBody$ {
    export type Inbound = {
        name: string;
    };

    export const inboundSchema: z.ZodType<PostV1ApisCreateApiRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
            };
        });

    export type Outbound = {
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostV1ApisCreateApiRequestBody> =
        z
            .object({
                name: z.string(),
            })
            .transform((v) => {
                return {
                    name: v.name,
                };
            });
}

/** @internal */
export namespace PostV1ApisCreateApiResponseBody$ {
    export type Inbound = {
        apiId: string;
    };

    export const inboundSchema: z.ZodType<PostV1ApisCreateApiResponseBody, z.ZodTypeDef, Inbound> =
        z
            .object({
                apiId: z.string(),
            })
            .transform((v) => {
                return {
                    apiId: v.apiId,
                };
            });

    export type Outbound = {
        apiId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostV1ApisCreateApiResponseBody
    > = z
        .object({
            apiId: z.string(),
        })
        .transform((v) => {
            return {
                apiId: v.apiId,
            };
        });
}

/** @internal */
export namespace PostV1ApisCreateApiResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PostV1ApisCreateApiResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostV1ApisCreateApiResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PostV1ApisCreateApiResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PostV1ApisCreateApiResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostV1ApisCreateApiResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PostV1ApisCreateApiResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
