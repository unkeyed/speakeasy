/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DeleteV1KeysKeyIdRequest = {};

/**
 * The key was successfully revoked, it may take up to 30s for this to take effect in all regions
 */
export type DeleteV1KeysKeyIdResponseBody = {};

export type DeleteV1KeysKeyIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The key was successfully revoked, it may take up to 30s for this to take effect in all regions
     */
    object?: DeleteV1KeysKeyIdResponseBody | undefined;
};

/** @internal */
export namespace DeleteV1KeysKeyIdRequest$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<DeleteV1KeysKeyIdRequest, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteV1KeysKeyIdRequest> =
        z.object({});
}

/** @internal */
export namespace DeleteV1KeysKeyIdResponseBody$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<DeleteV1KeysKeyIdResponseBody, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteV1KeysKeyIdResponseBody> =
        z.object({});
}

/** @internal */
export namespace DeleteV1KeysKeyIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: DeleteV1KeysKeyIdResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DeleteV1KeysKeyIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => DeleteV1KeysKeyIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: DeleteV1KeysKeyIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteV1KeysKeyIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => DeleteV1KeysKeyIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
