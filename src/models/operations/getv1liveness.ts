/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Services = {
    /**
     * The name of the connected metrics service
     */
    metrics: string;
    /**
     * The name of the connected logger service
     */
    logger: string;
    /**
     * The name of the connected ratelimit service
     */
    ratelimit: string;
    /**
     * The name of the connected usagelimit service
     */
    usagelimit: string;
    /**
     * The name of the connected analytics service
     */
    analytics: string;
};

/**
 * The configured services and their status
 */
export type GetV1LivenessResponseBody = {
    /**
     * The status of the server
     */
    status: string;
    services: Services;
};

export type GetV1LivenessResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The configured services and their status
     */
    object?: GetV1LivenessResponseBody | undefined;
};

/** @internal */
export namespace Services$ {
    export type Inbound = {
        metrics: string;
        logger: string;
        ratelimit: string;
        usagelimit: string;
        analytics: string;
    };

    export const inboundSchema: z.ZodType<Services, z.ZodTypeDef, Inbound> = z
        .object({
            metrics: z.string(),
            logger: z.string(),
            ratelimit: z.string(),
            usagelimit: z.string(),
            analytics: z.string(),
        })
        .transform((v) => {
            return {
                metrics: v.metrics,
                logger: v.logger,
                ratelimit: v.ratelimit,
                usagelimit: v.usagelimit,
                analytics: v.analytics,
            };
        });

    export type Outbound = {
        metrics: string;
        logger: string;
        ratelimit: string;
        usagelimit: string;
        analytics: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Services> = z
        .object({
            metrics: z.string(),
            logger: z.string(),
            ratelimit: z.string(),
            usagelimit: z.string(),
            analytics: z.string(),
        })
        .transform((v) => {
            return {
                metrics: v.metrics,
                logger: v.logger,
                ratelimit: v.ratelimit,
                usagelimit: v.usagelimit,
                analytics: v.analytics,
            };
        });
}

/** @internal */
export namespace GetV1LivenessResponseBody$ {
    export type Inbound = {
        status: string;
        services: Services$.Inbound;
    };

    export const inboundSchema: z.ZodType<GetV1LivenessResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string(),
            services: z.lazy(() => Services$.inboundSchema),
        })
        .transform((v) => {
            return {
                status: v.status,
                services: v.services,
            };
        });

    export type Outbound = {
        status: string;
        services: Services$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetV1LivenessResponseBody> = z
        .object({
            status: z.string(),
            services: z.lazy(() => Services$.outboundSchema),
        })
        .transform((v) => {
            return {
                status: v.status,
                services: v.services,
            };
        });
}

/** @internal */
export namespace GetV1LivenessResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetV1LivenessResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetV1LivenessResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetV1LivenessResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetV1LivenessResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetV1LivenessResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetV1LivenessResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
