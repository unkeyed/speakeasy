/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type PostV1KeysDeleteKeyRequestBody = {
    /**
     * The id of the key to revoke
     */
    keyId: string;
};

/**
 * The key was successfully revoked, it may take up to 30s for this to take effect in all regions
 */
export type PostV1KeysDeleteKeyResponseBody = {};

export type PostV1KeysDeleteKeyResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The key was successfully revoked, it may take up to 30s for this to take effect in all regions
     */
    object?: PostV1KeysDeleteKeyResponseBody | undefined;
};

/** @internal */
export namespace PostV1KeysDeleteKeyRequestBody$ {
    export type Inbound = {
        keyId: string;
    };

    export const inboundSchema: z.ZodType<PostV1KeysDeleteKeyRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            keyId: z.string(),
        })
        .transform((v) => {
            return {
                keyId: v.keyId,
            };
        });

    export type Outbound = {
        keyId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostV1KeysDeleteKeyRequestBody> =
        z
            .object({
                keyId: z.string(),
            })
            .transform((v) => {
                return {
                    keyId: v.keyId,
                };
            });
}

/** @internal */
export namespace PostV1KeysDeleteKeyResponseBody$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostV1KeysDeleteKeyResponseBody, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostV1KeysDeleteKeyResponseBody
    > = z.object({});
}

/** @internal */
export namespace PostV1KeysDeleteKeyResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PostV1KeysDeleteKeyResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostV1KeysDeleteKeyResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PostV1KeysDeleteKeyResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PostV1KeysDeleteKeyResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostV1KeysDeleteKeyResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PostV1KeysDeleteKeyResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
